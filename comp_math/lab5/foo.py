import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# --- Сначала определим функцию f(x, y) из вашего ДУ ---
# y' = f(x, y) = e^x / ((1 + e^x)y)
def f_xy(x, y):
    # Избегаем деления на ноль, если y очень близко к нулю
    # Хотя для наших решений на [0,1] y должен быть > 0
    if np.isscalar(y):
        if abs(y) < 1e-12:
            return np.sign(y) * 1e12 if y != 0 else 0 # или другое поведение
    elif np.any(np.abs(y) < 1e-12):
        # Для массивов, можно обработать поэлементно или заменить, здесь просто пропустим
        pass
    return np.exp(x) / ((1 + np.exp(x)) * y)

# --- ВСТАВЬТЕ СЮДА ДАННЫЕ ИЗ ВЫВОДА C++ ПРОГРАММЫ ---

# Данные для точного решения (из C++ вывода)
x_exact_str = """
0.00000000 1.00000000
0.01000000 1.01010033
0.02000000 1.02040268
0.03000000 1.03090907
0.04000000 1.04162155
0.05000000 1.05254219
0.06000000 1.06367309
0.07000000 1.07501636
0.08000000 1.08657414
0.09000000 1.09834857
0.10000000 1.11034184
0.11000000 1.12255614
0.12000000 1.13499370
0.13000000 1.14765677
0.14000000 1.16054760
0.15000000 1.17366849
0.16000000 1.18702174
0.17000000 1.20060970
0.18000000 1.21443473
0.19000000 1.22849920
0.20000000 1.24280552
0.21000000 1.25735612
0.22000000 1.27215346
0.23000000 1.28720002
0.24000000 1.30249830
0.25000000 1.31805083
0.26000000 1.33386017
0.27000000 1.34992890
0.28000000 1.36625962
0.29000000 1.38285498
0.30000000 1.39971762
0.31000000 1.41685023
0.32000000 1.43425553
0.33000000 1.45193626
0.34000000 1.46989518
0.35000000 1.48813510
0.36000000 1.50665883
0.37000000 1.52546923
0.38000000 1.54456918
0.39000000 1.56396159
0.40000000 1.58364940
0.41000000 1.60363557
0.42000000 1.62392311
0.43000000 1.64451505
0.44000000 1.66541444
0.45000000 1.68662437
0.46000000 1.70814797
0.47000000 1.72998839
0.48000000 1.75214880
0.49000000 1.77463244
0.50000000 1.79744254
0.51000000 1.82058239
0.52000000 1.84405530
0.53000000 1.86786462
0.54000000 1.89201372
0.55000000 1.91650604
0.56000000 1.94134500
0.57000000 1.96653410
0.58000000 1.99207686
0.59000000 2.01797683
0.60000000 2.04423760
0.61000000 2.07086280
0.62000000 2.09785608
0.63000000 2.12522116
0.64000000 2.15296176
0.65000000 2.18108166
0.66000000 2.20958467
0.67000000 2.23847464
0.68000000 2.26775546
0.69000000 2.29743107
0.70000000 2.32750541
0.71000000 2.35798252
0.72000000 2.38886642
0.73000000 2.42016122
0.74000000 2.45187103
0.75000000 2.48400003
0.76000000 2.51655244
0.77000000 2.54953251
0.78000000 2.58294453
0.79000000 2.61679285
0.80000000 2.65108186
0.81000000 2.68581597
0.82000000 2.72099968
0.83000000 2.75663748
0.84000000 2.79273395
0.85000000 2.82929370
0.86000000 2.86632139
0.87000000 2.90382171
0.88000000 2.94179941
0.89000000 2.98025930
0.90000000 3.01920622
0.91000000 3.05864507
0.92000000 3.09858078
0.93000000 3.13901836
0.94000000 3.17996284
0.95000000 3.22141932
0.96000000 3.26339295
0.97000000 3.30588892
0.98000000 3.34891248
0.99000000 3.39246894
1.00000000 3.43656366
""".strip()

# Данные для метода Эйлера-Коши (из C++ вывода)
x_ec_str = """
0.00000000 1.00000000
0.04420838 1.04618448
0.08851872 1.09657517
0.13218076 1.15042445
0.17520385 1.20774147
0.21760649 1.26854707
0.25940649 1.33286306
0.30062091 1.40071198
0.34126609 1.47211708
0.38135767 1.54710229
0.42091069 1.62569217
0.45993955 1.70791187
0.49845809 1.79378710
0.53647959 1.88334414
0.57401684 1.97660973
0.61108213 2.07361112
0.64768727 2.17437602
0.68384365 2.27893255
0.71956223 2.38730927
0.75485357 2.49953511
0.78972786 2.61563938
0.82419491 2.73565174
0.85826421 2.85960220
0.89194490 2.98752108
0.92524582 3.11943901
0.95817549 3.25538692
0.99074218 3.39539602
1.00000000 3.43623345
""".strip()

# Данные для метода Рунге-Кутты 4 (из C++ вывода)
x_rk4_str = """
0.00000000 1.00000000
0.05000000 1.05254219
0.10000000 1.11034184
0.15000000 1.17366848
0.20000000 1.24280551
0.25000000 1.31805083
0.30000000 1.39971761
0.35000000 1.48813509
0.40000000 1.58364939
0.45000000 1.68662437
0.50000000 1.79744254
0.55000000 1.91650603
0.60000000 2.04423759
0.65000000 2.18108165
0.70000000 2.32750541
0.75000000 2.48400002
0.80000000 2.65108185
0.85000000 2.82929369
0.90000000 3.01920621
0.95000000 3.22141930
1.00000000 3.43656364
""".strip()

def parse_data(data_str):
    lines = data_str.strip().split('\n')
    x_vals = []
    y_vals = []
    for line in lines:
        if line.startswith("#") or not line.strip(): # Skip comments or empty lines
            continue
        parts = line.split() # Corrected: split by whitespace instead of comma
        if len(parts) == 2: # Ensure we have two parts after splitting
            x_vals.append(float(parts[0].strip()))
            y_vals.append(float(parts[1].strip()))
        else:
            print(f"Warning: Skipping malformed line: '{line}'") # Optional: warn about bad lines
    return np.array(x_vals), np.array(y_vals)

# Парсинг данных
x_exact, y_exact = parse_data(x_exact_str)
x_ec, y_ec = parse_data(x_ec_str)
x_rk4, y_rk4 = parse_data(x_rk4_str)

# --- Вычисление значений f(x, y(x)) для каждого набора данных ---
f_exact_values = f_xy(x_exact, y_exact)
f_ec_values = f_xy(x_ec, y_ec)
f_rk4_values = f_xy(x_rk4, y_rk4)

# --- Построение графиков ---
plt.style.use('seaborn-v0_8-whitegrid') # Используем стиль для красивых графиков

# График 1: Сравнение решений y(x)
plt.figure(figsize=(12, 7))
plt.plot(x_exact, y_exact, label='Точное решение y(x)', marker='o', linestyle='-', linewidth=1, markersize=4, color='green')
plt.plot(x_ec, y_ec, label='Метод Эйлера-Коши y(x)', marker='s', linestyle='--', linewidth=1, markersize=4, color='blue')
plt.plot(x_rk4, y_rk4, label='Метод Рунге-Кутты 4 y(x)', marker='^', linestyle=':', linewidth=1, markersize=4, color='red')
plt.title('Сравнение численных решений с точным решением y(x)')
plt.xlabel('x')
plt.ylabel('y(x)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# График 2: Сравнение значений f(x, y(x))
plt.figure(figsize=(12, 7))
plt.plot(x_exact, f_exact_values, label='f(x, y_exact(x))', marker='o', linestyle='-', linewidth=1, markersize=4, color='green')
plt.plot(x_ec, f_ec_values, label='f(x, y_EC(x))', marker='s', linestyle='--', linewidth=1, markersize=4, color='blue')
plt.plot(x_rk4, f_rk4_values, label='f(x, y_RK4(x))', marker='^', linestyle=':', linewidth=1, markersize=4, color='red')
plt.title('Сравнение значений f(x, y(x)) для различных решений')
plt.xlabel('x')
plt.ylabel('f(x, y(x))')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Вывод таблиц со значениями для f(x,y(x)) (для справки) ---
print("\nТаблица значений для f(x, y_exact(x)):")
df_f_exact = pd.DataFrame({'x': x_exact, 'f(x, y_exact(x))': f_exact_values})
print(df_f_exact.to_string(index=False))

print("\nТаблица значений для f(x, y_EC(x)):")
df_f_ec = pd.DataFrame({'x': x_ec, 'f(x, y_EC(x))': f_ec_values})
print(df_f_ec.to_string(index=False))

print("\nТаблица значений для f(x, y_RK4(x)):")
df_f_rk4 = pd.DataFrame({'x': x_rk4, 'f(x, y_RK4(x))': f_rk4_values})
print(df_f_rk4.to_string(index=False))